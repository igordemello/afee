// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tcc_in305b.Data;

#nullable disable

namespace tcc_in305b.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241211124549_PartidaRecebeChaveamento")]
    partial class PartidaRecebeChaveamento
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("HistoricoPlayerGrupo", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("GrupoId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("MotivoDeTroca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId", "GrupoId", "Data");

                    b.HasIndex("GrupoId");

                    b.ToTable("HistoricoPlayerGrupos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("tcc_in305b.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("tcc_in305b.Models.Treino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TreinoTipoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<int?>("EstrategiaId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("HorarioFim")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HorarioInicio")
                        .HasColumnType("time");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinoTipoId");

                    b.HasIndex("EstrategiaId");

                    b.HasIndex("TreinadorId");

                    b.ToTable("Treinos");
                });

            modelBuilder.Entity("tcc_in305b.Models.TreinoGrupo", b =>
                {
                    b.Property<int>("TreinoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TreinoId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("TreinoGrupos");
                });

            modelBuilder.Entity("tcc_in305b.Models.TreinoPlayer", b =>
                {
                    b.Property<int>("TreinoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TreinoId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TreinoPlayers");
                });

            modelBuilder.Entity("tcc_in305b.Models.TreinoTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Codigo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorHex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.ToTable("TreinoTipos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Analise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.ToTable("Analises");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnaliseGrupo", b =>
                {
                    b.Property<int>("AnaliseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Formacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnaliseId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("AnaliseGrupos");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnaliseNota", b =>
                {
                    b.Property<int>("AnaliseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotaId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("AnaliseId", "NotaId");

                    b.HasIndex("NotaId");

                    b.ToTable("AnaliseNotas");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnalisePlayer", b =>
                {
                    b.Property<int>("AnaliseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnaliseId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("AnalisePlayers");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnalisePlayerGrupo", b =>
                {
                    b.Property<int>("AnaliseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Formacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnaliseId", "PlayerId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("PlayerId");

                    b.ToTable("AnalisePlayerGrupos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Chaveamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AnteriorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TorneioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnteriorId");

                    b.HasIndex("TorneioId");

                    b.ToTable("Chaveamentos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DtCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SelecaoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SelecaoId");

                    b.HasIndex("TreinadorId");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("tcc_in305b.Models.EquipePartida", b =>
                {
                    b.Property<int>("EquipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartidaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Pontuacao")
                        .HasColumnType("INTEGER");

                    b.HasKey("EquipeId", "PartidaId");

                    b.HasIndex("PartidaId");

                    b.ToTable("EquipePartidas");
                });

            modelBuilder.Entity("tcc_in305b.Models.EquipeTorneio", b =>
                {
                    b.Property<int>("EquipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TorneioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EquipeId", "TorneioId");

                    b.HasIndex("TorneioId");

                    b.ToTable("EquipeTorneios");
                });

            modelBuilder.Entity("tcc_in305b.Models.Estrategia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descrição")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.ToTable("Estrategias");
                });

            modelBuilder.Entity("tcc_in305b.Models.EstrategiaGrupo", b =>
                {
                    b.Property<int>("EstrategiaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EstrategiaId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("EstrategiaGrupos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Fase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fases");
                });

            modelBuilder.Entity("tcc_in305b.Models.FaseTreinador", b =>
                {
                    b.Property<int>("FaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FaseId", "TreinadorId");

                    b.HasIndex("TreinadorId");

                    b.ToTable("FaseTreinadores");
                });

            modelBuilder.Entity("tcc_in305b.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DtCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("tcc_in305b.Models.Partida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChaveamentoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoundId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChaveamentoId");

                    b.HasIndex("RoundId");

                    b.ToTable("Partidas");
                });

            modelBuilder.Entity("tcc_in305b.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DtCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("EloCriacao")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EquipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FaseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("FgCandidato")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IGL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Puuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.HasIndex("FaseId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("TreinadorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("tcc_in305b.Models.ResultIndSelecao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SelecaoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SelecaoId");

                    b.ToTable("ResultIndSelecoes");
                });

            modelBuilder.Entity("tcc_in305b.Models.ResultIndSelecaoNota", b =>
                {
                    b.Property<int>("ResultIndSelecaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotaId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ResultIndSelecaoId", "NotaId");

                    b.HasIndex("NotaId");

                    b.ToTable("ResultIndSelecaoNotas");
                });

            modelBuilder.Entity("tcc_in305b.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("SelecaoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SelecaoId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("tcc_in305b.Models.Selecao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Convidado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.ToTable("Selecoes");
                });

            modelBuilder.Entity("tcc_in305b.Models.SelecaoPlayer", b =>
                {
                    b.Property<int>("SelecaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SelecaoId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("SelecaoPlayers");
                });

            modelBuilder.Entity("tcc_in305b.Models.ToDoTreinador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DtCriacao")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Feito")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<int>("TreinadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.ToTable("ToDoTreinadores");
                });

            modelBuilder.Entity("tcc_in305b.Models.Torneio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Convidado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("FaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FaseId");

                    b.ToTable("Torneios");
                });

            modelBuilder.Entity("tcc_in305b.Models.Treinador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Treinadores");
                });

            modelBuilder.Entity("HistoricoPlayerGrupo", b =>
                {
                    b.HasOne("tcc_in305b.Models.Grupo", "Grupo")
                        .WithMany("HistoricoPlayerGrupos")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Player", "Player")
                        .WithMany("HistoricoPlayerGrupos")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tcc_in305b.Models.Admin", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("tcc_in305b.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("tcc_in305b.Models.Treino", b =>
                {
                    b.HasOne("tcc_in305b.Models.TreinoTipo", "TreinoTipo")
                        .WithMany("Treinos")
                        .HasForeignKey("TreinoTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Estrategia", "Estrategia")
                        .WithMany()
                        .HasForeignKey("EstrategiaId");

                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany()
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreinoTipo");

                    b.Navigation("Estrategia");

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.TreinoGrupo", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treino", "Treino")
                        .WithMany("TreinoGrupos")
                        .HasForeignKey("TreinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treino");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("tcc_in305b.Models.TreinoPlayer", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treino", "Treino")
                        .WithMany("TreinoPlayers")
                        .HasForeignKey("TreinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treino");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("tcc_in305b.Models.TreinoTipo", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany("TreinoTipos")
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.Analise", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany("Analises")
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnaliseGrupo", b =>
                {
                    b.HasOne("tcc_in305b.Models.Analise", "Analise")
                        .WithMany("AnaliseGrupos")
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Grupo", "Grupo")
                        .WithMany("AnaliseGrupos")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analise");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnaliseNota", b =>
                {
                    b.HasOne("tcc_in305b.Models.Analise", "Analise")
                        .WithMany("AnaliseNotas")
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Nota", "Nota")
                        .WithMany("AnaliseNotas")
                        .HasForeignKey("NotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analise");

                    b.Navigation("Nota");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnalisePlayer", b =>
                {
                    b.HasOne("tcc_in305b.Models.Analise", "Analise")
                        .WithMany("AnalisePlayers")
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Player", "Player")
                        .WithMany("AnalisePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analise");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("tcc_in305b.Models.AnalisePlayerGrupo", b =>
                {
                    b.HasOne("tcc_in305b.Models.Analise", "Analise")
                        .WithMany("AnalisePlayerGrupos")
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Grupo", "Grupo")
                        .WithMany("AnalisePlayerGrupos")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Player", "Player")
                        .WithMany("AnalisePlayerGrupos")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analise");

                    b.Navigation("Grupo");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("tcc_in305b.Models.Chaveamento", b =>
                {
                    b.HasOne("tcc_in305b.Models.Chaveamento", "Anterior")
                        .WithMany("Proximos")
                        .HasForeignKey("AnteriorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("tcc_in305b.Models.Torneio", "Torneio")
                        .WithMany("Chaveamentos")
                        .HasForeignKey("TorneioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anterior");

                    b.Navigation("Torneio");
                });

            modelBuilder.Entity("tcc_in305b.Models.Equipe", b =>
                {
                    b.HasOne("tcc_in305b.Models.Selecao", "Selecao")
                        .WithMany("Equipes")
                        .HasForeignKey("SelecaoId");

                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany("Equipes")
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Selecao");

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.EquipePartida", b =>
                {
                    b.HasOne("tcc_in305b.Models.Equipe", "Equipe")
                        .WithMany("EquipePartidas")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Partida", "Partida")
                        .WithMany("EquipePartidas")
                        .HasForeignKey("PartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("tcc_in305b.Models.EquipeTorneio", b =>
                {
                    b.HasOne("tcc_in305b.Models.Equipe", "Equipe")
                        .WithMany("EquipeTorneios")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Torneio", "Torneio")
                        .WithMany("EquipeTorneios")
                        .HasForeignKey("TorneioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Torneio");
                });

            modelBuilder.Entity("tcc_in305b.Models.Estrategia", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany()
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.EstrategiaGrupo", b =>
                {
                    b.HasOne("tcc_in305b.Models.Estrategia", "Estrategia")
                        .WithMany("EstrategiaGrupos")
                        .HasForeignKey("EstrategiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estrategia");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("tcc_in305b.Models.FaseTreinador", b =>
                {
                    b.HasOne("tcc_in305b.Models.Fase", "Fase")
                        .WithMany("FaseTreinadores")
                        .HasForeignKey("FaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany("FaseTreinadores")
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fase");

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.Grupo", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany()
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.Nota", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany("Notas")
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.Partida", b =>
                {
                    b.HasOne("tcc_in305b.Models.Chaveamento", "Chaveamento")
                        .WithMany("Partidas")
                        .HasForeignKey("ChaveamentoId");

                    b.HasOne("tcc_in305b.Models.Round", "Round")
                        .WithMany("Partidas")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chaveamento");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("tcc_in305b.Models.Player", b =>
                {
                    b.HasOne("tcc_in305b.Models.Equipe", "Equipe")
                        .WithMany("Players")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("tcc_in305b.Models.Fase", "Fase")
                        .WithMany("Players")
                        .HasForeignKey("FaseId");

                    b.HasOne("tcc_in305b.Models.Grupo", "Grupo")
                        .WithMany("Players")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany()
                        .HasForeignKey("TreinadorId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("tcc_in305b.Models.Player", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Fase");

                    b.Navigation("Grupo");

                    b.Navigation("Treinador");

                    b.Navigation("User");
                });

            modelBuilder.Entity("tcc_in305b.Models.ResultIndSelecao", b =>
                {
                    b.HasOne("tcc_in305b.Models.Player", "Player")
                        .WithMany("ResultIndSelecoes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Selecao", "Selecao")
                        .WithMany("ResultIndSelecoes")
                        .HasForeignKey("SelecaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Selecao");
                });

            modelBuilder.Entity("tcc_in305b.Models.ResultIndSelecaoNota", b =>
                {
                    b.HasOne("tcc_in305b.Models.Nota", "Nota")
                        .WithMany("ResultIndSelecaoNotas")
                        .HasForeignKey("NotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.ResultIndSelecao", "ResultIndSelecao")
                        .WithMany("ResultIndSelecaoNotas")
                        .HasForeignKey("ResultIndSelecaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nota");

                    b.Navigation("ResultIndSelecao");
                });

            modelBuilder.Entity("tcc_in305b.Models.Round", b =>
                {
                    b.HasOne("tcc_in305b.Models.Selecao", "Selecao")
                        .WithMany("Rounds")
                        .HasForeignKey("SelecaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Selecao");
                });

            modelBuilder.Entity("tcc_in305b.Models.Selecao", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany("Selecoes")
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.SelecaoPlayer", b =>
                {
                    b.HasOne("tcc_in305b.Models.Player", "Player")
                        .WithMany("SelecaoPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc_in305b.Models.Selecao", "Selecao")
                        .WithMany("SelecaoPlayers")
                        .HasForeignKey("SelecaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Selecao");
                });

            modelBuilder.Entity("tcc_in305b.Models.ToDoTreinador", b =>
                {
                    b.HasOne("tcc_in305b.Models.Treinador", "Treinador")
                        .WithMany("ToDoTreinadores")
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("tcc_in305b.Models.Torneio", b =>
                {
                    b.HasOne("tcc_in305b.Models.Fase", "Fase")
                        .WithMany("Torneios")
                        .HasForeignKey("FaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fase");
                });

            modelBuilder.Entity("tcc_in305b.Models.Treinador", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("tcc_in305b.Models.Treinador", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("tcc_in305b.Models.Treino", b =>
                {
                    b.Navigation("TreinoGrupos");

                    b.Navigation("TreinoPlayers");
                });

            modelBuilder.Entity("tcc_in305b.Models.TreinoTipo", b =>
                {
                    b.Navigation("Treinos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Analise", b =>
                {
                    b.Navigation("AnaliseGrupos");

                    b.Navigation("AnaliseNotas");

                    b.Navigation("AnalisePlayerGrupos");

                    b.Navigation("AnalisePlayers");
                });

            modelBuilder.Entity("tcc_in305b.Models.Chaveamento", b =>
                {
                    b.Navigation("Partidas");

                    b.Navigation("Proximos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Equipe", b =>
                {
                    b.Navigation("EquipePartidas");

                    b.Navigation("EquipeTorneios");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("tcc_in305b.Models.Estrategia", b =>
                {
                    b.Navigation("EstrategiaGrupos");
                });

            modelBuilder.Entity("tcc_in305b.Models.Fase", b =>
                {
                    b.Navigation("FaseTreinadores");

                    b.Navigation("Players");

                    b.Navigation("Torneios");
                });

            modelBuilder.Entity("tcc_in305b.Models.Grupo", b =>
                {
                    b.Navigation("AnaliseGrupos");

                    b.Navigation("AnalisePlayerGrupos");

                    b.Navigation("HistoricoPlayerGrupos");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("tcc_in305b.Models.Nota", b =>
                {
                    b.Navigation("AnaliseNotas");

                    b.Navigation("ResultIndSelecaoNotas");
                });

            modelBuilder.Entity("tcc_in305b.Models.Partida", b =>
                {
                    b.Navigation("EquipePartidas");
                });

            modelBuilder.Entity("tcc_in305b.Models.Player", b =>
                {
                    b.Navigation("AnalisePlayerGrupos");

                    b.Navigation("AnalisePlayers");

                    b.Navigation("HistoricoPlayerGrupos");

                    b.Navigation("ResultIndSelecoes");

                    b.Navigation("SelecaoPlayers");
                });

            modelBuilder.Entity("tcc_in305b.Models.ResultIndSelecao", b =>
                {
                    b.Navigation("ResultIndSelecaoNotas");
                });

            modelBuilder.Entity("tcc_in305b.Models.Round", b =>
                {
                    b.Navigation("Partidas");
                });

            modelBuilder.Entity("tcc_in305b.Models.Selecao", b =>
                {
                    b.Navigation("Equipes");

                    b.Navigation("ResultIndSelecoes");

                    b.Navigation("Rounds");

                    b.Navigation("SelecaoPlayers");
                });

            modelBuilder.Entity("tcc_in305b.Models.Torneio", b =>
                {
                    b.Navigation("Chaveamentos");

                    b.Navigation("EquipeTorneios");
                });

            modelBuilder.Entity("tcc_in305b.Models.Treinador", b =>
                {
                    b.Navigation("TreinoTipos");

                    b.Navigation("Analises");

                    b.Navigation("Equipes");

                    b.Navigation("FaseTreinadores");

                    b.Navigation("Notas");

                    b.Navigation("Selecoes");

                    b.Navigation("ToDoTreinadores");
                });
#pragma warning restore 612, 618
        }
    }
}
